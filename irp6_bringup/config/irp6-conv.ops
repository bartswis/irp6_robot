import("rtt_ros")
ros.import("rtt_rospack")

<<<<<<< HEAD
ros.import("conman")
ros.import("rtt_conman_msgs")
ros.import("conman_ros")
ros.import("hardware_interface")
ros.import("irp6_regulator")
ros.import("motor_state_export")
ros.import("oro_joint_state_publisher")
ros.import("internal_space_spline_trajectory_action")
ros.import("internal_space_spline_trajectory_generator")
=======
runScript( ros.find("irp6_bringup") + "/config/common-imports.ops")

>>>>>>> 7728b32a4f8db01281e20f728959f7e1e7e64924
ros.import("irp6pm_kinematic")
ros.import("irp6otm_kinematic")
ros.import("irp6tfg_kinematic")
ros.import("conveyor_kinematic")
ros.import("force_control")
ros.import("irp6_force_sensor")
ros.import("irp6_haptic")


//------------------------------------------------------------------------------
//-- Two manipulators and grippers
//------------------------------------------------------------------------------


runScript( ros.find("irp6_bringup") + "/config/load-scheme-and-hi.ops")

loadComponent("MotorStateExport","MotorStateExport")
MotorStateExport.loadService("rosparam")
MotorStateExport.rosparam.getAll()
MotorStateExport.configure()

runScript( ros.find("irp6_bringup") + "/config/irp6-p-inside-pre-add-scheme-peer.ops")
runScript( ros.find("irp6_bringup") + "/config/irp6-ot-inside-pre-add-scheme-peer.ops")
runScript( ros.find("irp6_bringup") + "/config/conv-inside-pre-add-scheme-peer.ops")

connect("MotorStateExport.MotorPositionIn","SarkofagHardwareInterface.MotorPosition_irp6pm_2", ConnPolicy())
connect("MotorStateExport.MotorIncrementIn","SarkofagHardwareInterface.MotorIncrement_irp6pm_2", ConnPolicy())
connect("MotorStateExport.MotorCurrentIn","SarkofagHardwareInterface.MotorCurrent_irp6pm_2", ConnPolicy())
connect("MotorStateExport.SynchroStateIn","SarkofagHardwareInterface.IsSynchronised", ConnPolicy())



//
// Irp6 Haptic
//

loadComponent("Irp6Haptic", "Irp6Haptic")
Irp6Haptic.configure()

connect("Irp6otmForwardKinematic.EndEffectorOutputPose", "Irp6Haptic.CurrentEndEffectorPose", ConnPolicy())
connect("Irp6pmInverseKinematic.InputEndEffectorPose", "Irp6Haptic.OutputEndEffectorPose", ConnPolicy())

connect("Irp6pmForceTransformation.OutputEndEffectorWrench", "Irp6Haptic.CurrentEndEffectorWrench", ConnPolicy())
connect("Irp6otmForceControlLaw.CurrentFclParam", "Irp6Haptic.OutputFclParam", ConnPolicy())


addPeer("Irp6scheme", "Irp6HardwareInterface");
addPeer("Irp6scheme", "PortDoubleToFloat64_1");
addPeer("Irp6scheme", "Irp6Haptic");

runScript( ros.find("irp6_bringup") + "/config/irp6-p-inside-add-scheme-peer.ops")
runScript( ros.find("irp6_bringup") + "/config/irp6-ot-inside-add-scheme-peer.ops")
runScript( ros.find("irp6_bringup") + "/config/conv-inside-add-scheme-peer.ops")

Irp6scheme.addBlock("Irp6HardwareInterface");
Irp6scheme.addBlock("PortDoubleToFloat64_1");
Irp6scheme.addBlock("Irp6Haptic");

runScript( ros.find("irp6_bringup") + "/config/irp6-p-inside-add-scheme-block.ops")
runScript( ros.find("irp6_bringup") + "/config/irp6-ot-inside-add-scheme-block.ops")
runScript( ros.find("irp6_bringup") + "/config/conv-inside-add-scheme-block.ops")

runScript( ros.find("irp6_bringup") + "/config/irp6-p-inside-pre-start.ops")
runScript( ros.find("irp6_bringup") + "/config/irp6-ot-inside-pre-start.ops")
runScript( ros.find("irp6_bringup") + "/config/conv-inside-pre-start.ops")

## Start it
Irp6scheme.start()

runScript( ros.find("irp6_bringup") + "/config/irp6-p-inside-start.ops")
runScript( ros.find("irp6_bringup") + "/config/irp6-ot-inside-start.ops")
runScript( ros.find("irp6_bringup") + "/config/conv-inside-start.ops")

runScript( ros.find("irp6_bringup") + "/config/start-hi.ops")
PortDoubleToFloat64_1.start()

